import { generateObject } from 'ai';
import { createOpenAI } from '@ai-sdk/openai';
import { z } from 'zod';

const openai = createOpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Schema for extracting lead data from conversation
const leadSchema = z.object({
  name: z.string().optional().describe('Client name'),
  company: z.string().optional().describe('Company name'),
  email: z.string().email().optional().describe('Client email address'),
  business_type: z.string().optional().describe('Type of business'),
  project_needs: z.string().optional().describe('What they need help with'),
  budget: z.string().optional().describe('Budget range'),
  timeline: z.string().optional().describe('Project timeline'),
  brief_summary: z.string().describe('Summary of the project brief')
});

export const handler = async (event, context) => {
  // Enable CORS
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS'
      },
      body: ''
    };
  }

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    const { conversation } = JSON.parse(event.body);

    // Extract lead data using AI
    const result = await generateObject({
      model: openai('gpt-4o-mini'),
      schema: leadSchema,
      prompt: `Extract client information from this conversation and create a project brief summary. 
      
      Conversation:
      ${conversation}
      
      Please extract any available information about the client's project needs, budget, timeline, and contact details. 
      Create a comprehensive summary of what they're looking for.`
    });

    const leadData = result.object;

    // Create email content
    const emailSubject = `New Lead: ${leadData.company || leadData.name || 'Unknown Company'}`;
    
    const emailBody = `
New Project Lead - Hoffer Studios

Contact Information:
- Name: ${leadData.name || 'Not provided'}
- Company: ${leadData.company || 'Not provided'}
- Email: ${leadData.email || 'Not provided'}
- Business Type: ${leadData.business_type || 'Not provided'}

Project Details:
- Needs: ${leadData.project_needs || 'Not provided'}
- Budget: ${leadData.budget || 'Not provided'}
- Timeline: ${leadData.timeline || 'Not provided'}

Brief Summary:
${leadData.brief_summary}

Full Conversation:
${conversation}

---
Generated by Hoffer Studios AI Assistant
    `.trim();

    // For now, we'll log the email content to console
    // In production, you'd replace this with an actual email service
    console.log('=== NEW LEAD EMAIL ===');
    console.log('Subject:', emailSubject);
    console.log('Body:', emailBody);
    console.log('======================');

    // TODO: Replace with actual email sending service like:
    // - SendGrid (recommended for Netlify)
    // - Mailgun
    // - AWS SES
    // - Resend
    // - Or any other email service
    
    // Example SendGrid implementation (uncomment when ready):
    /*
    const sgMail = require('@sendgrid/mail');
    sgMail.setApiKey(process.env.SENDGRID_API_KEY);
    
    const msg = {
        to: 'info@hofferstudios.com',
        from: 'noreply@hofferstudios.com',
        subject: emailSubject,
        text: emailBody,
    };
    
    await sgMail.send(msg);
    */

    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        success: true, 
        message: 'Lead processed successfully',
        emailSubject,
        emailBody
      })
    };

  } catch (error) {
    console.error('Send lead error:', error);
    return {
      statusCode: 500,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        error: 'Failed to process lead',
        details: error.message 
      })
    };
  }
};
